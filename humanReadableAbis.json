[
 {
  "contractName": "Ownable",
  "humanReadableAbiList": [
   "function owner() view returns (address)",
   "function renounceOwnership() nonpayable",
   "function transferOwnership(address) nonpayable",
   "event OwnershipTransferred(address,address)"
  ]
 },
 {
  "contractName": "IERC20",
  "humanReadableAbiList": [
   "function allowance(address,address) view returns (uint256)",
   "function approve(address,uint256) nonpayable returns (bool)",
   "function balanceOf(address) view returns (uint256)",
   "function totalSupply() view returns (uint256)",
   "function transfer(address,uint256) nonpayable returns (bool)",
   "function transferFrom(address,address,uint256) nonpayable returns (bool)",
   "event Approval(address,address,uint256)",
   "event Transfer(address,address,uint256)"
  ]
 },
 {
  "contractName": "IERC20Permit",
  "humanReadableAbiList": [
   "function DOMAIN_SEPARATOR() view returns (bytes32)",
   "function nonces(address) view returns (uint256)",
   "function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) nonpayable"
  ]
 },
 {
  "contractName": "SafeERC20",
  "humanReadableAbiList": []
 },
 {
  "contractName": "ERC721",
  "humanReadableAbiList": [
   "function approve(address,uint256) nonpayable",
   "function balanceOf(address) view returns (uint256)",
   "function getApproved(uint256) view returns (address)",
   "function isApprovedForAll(address,address) view returns (bool)",
   "function name() view returns (string)",
   "function ownerOf(uint256) view returns (address)",
   "function safeTransferFrom(address,address,uint256) nonpayable",
   "function safeTransferFrom(address,address,uint256,bytes) nonpayable",
   "function setApprovalForAll(address,bool) nonpayable",
   "function supportsInterface(bytes4) view returns (bool)",
   "function symbol() view returns (string)",
   "function tokenURI(uint256) view returns (string)",
   "function transferFrom(address,address,uint256) nonpayable",
   "event Approval(address,address,uint256)",
   "event ApprovalForAll(address,address,bool)",
   "event Transfer(address,address,uint256)"
  ]
 },
 {
  "contractName": "IERC721",
  "humanReadableAbiList": [
   "function approve(address,uint256) nonpayable",
   "function balanceOf(address) view returns (uint256)",
   "function getApproved(uint256) view returns (address)",
   "function isApprovedForAll(address,address) view returns (bool)",
   "function ownerOf(uint256) view returns (address)",
   "function safeTransferFrom(address,address,uint256) nonpayable",
   "function safeTransferFrom(address,address,uint256,bytes) nonpayable",
   "function setApprovalForAll(address,bool) nonpayable",
   "function supportsInterface(bytes4) view returns (bool)",
   "function transferFrom(address,address,uint256) nonpayable",
   "event Approval(address,address,uint256)",
   "event ApprovalForAll(address,address,bool)",
   "event Transfer(address,address,uint256)"
  ]
 },
 {
  "contractName": "IERC721Receiver",
  "humanReadableAbiList": [
   "function onERC721Received(address,address,uint256,bytes) nonpayable returns (bytes4)"
  ]
 },
 {
  "contractName": "ERC721Enumerable",
  "humanReadableAbiList": [
   "function approve(address,uint256) nonpayable",
   "function balanceOf(address) view returns (uint256)",
   "function getApproved(uint256) view returns (address)",
   "function isApprovedForAll(address,address) view returns (bool)",
   "function name() view returns (string)",
   "function ownerOf(uint256) view returns (address)",
   "function safeTransferFrom(address,address,uint256) nonpayable",
   "function safeTransferFrom(address,address,uint256,bytes) nonpayable",
   "function setApprovalForAll(address,bool) nonpayable",
   "function supportsInterface(bytes4) view returns (bool)",
   "function symbol() view returns (string)",
   "function tokenByIndex(uint256) view returns (uint256)",
   "function tokenOfOwnerByIndex(address,uint256) view returns (uint256)",
   "function tokenURI(uint256) view returns (string)",
   "function totalSupply() view returns (uint256)",
   "function transferFrom(address,address,uint256) nonpayable",
   "event Approval(address,address,uint256)",
   "event ApprovalForAll(address,address,bool)",
   "event Transfer(address,address,uint256)"
  ]
 },
 {
  "contractName": "IERC721Enumerable",
  "humanReadableAbiList": [
   "function approve(address,uint256) nonpayable",
   "function balanceOf(address) view returns (uint256)",
   "function getApproved(uint256) view returns (address)",
   "function isApprovedForAll(address,address) view returns (bool)",
   "function ownerOf(uint256) view returns (address)",
   "function safeTransferFrom(address,address,uint256) nonpayable",
   "function safeTransferFrom(address,address,uint256,bytes) nonpayable",
   "function setApprovalForAll(address,bool) nonpayable",
   "function supportsInterface(bytes4) view returns (bool)",
   "function tokenByIndex(uint256) view returns (uint256)",
   "function tokenOfOwnerByIndex(address,uint256) view returns (uint256)",
   "function totalSupply() view returns (uint256)",
   "function transferFrom(address,address,uint256) nonpayable",
   "event Approval(address,address,uint256)",
   "event ApprovalForAll(address,address,bool)",
   "event Transfer(address,address,uint256)"
  ]
 },
 {
  "contractName": "IERC721Metadata",
  "humanReadableAbiList": [
   "function approve(address,uint256) nonpayable",
   "function balanceOf(address) view returns (uint256)",
   "function getApproved(uint256) view returns (address)",
   "function isApprovedForAll(address,address) view returns (bool)",
   "function name() view returns (string)",
   "function ownerOf(uint256) view returns (address)",
   "function safeTransferFrom(address,address,uint256) nonpayable",
   "function safeTransferFrom(address,address,uint256,bytes) nonpayable",
   "function setApprovalForAll(address,bool) nonpayable",
   "function supportsInterface(bytes4) view returns (bool)",
   "function symbol() view returns (string)",
   "function tokenURI(uint256) view returns (string)",
   "function transferFrom(address,address,uint256) nonpayable",
   "event Approval(address,address,uint256)",
   "event ApprovalForAll(address,address,bool)",
   "event Transfer(address,address,uint256)"
  ]
 },
 {
  "contractName": "ERC721Holder",
  "humanReadableAbiList": [
   "function onERC721Received(address,address,uint256,bytes) nonpayable returns (bytes4)"
  ]
 },
 {
  "contractName": "Address",
  "humanReadableAbiList": []
 },
 {
  "contractName": "Context",
  "humanReadableAbiList": []
 },
 {
  "contractName": "Strings",
  "humanReadableAbiList": []
 },
 {
  "contractName": "ERC165",
  "humanReadableAbiList": [
   "function supportsInterface(bytes4) view returns (bool)"
  ]
 },
 {
  "contractName": "IERC165",
  "humanReadableAbiList": [
   "function supportsInterface(bytes4) view returns (bool)"
  ]
 },
 {
  "contractName": "Math",
  "humanReadableAbiList": []
 },
 {
  "contractName": "SafeMath",
  "humanReadableAbiList": []
 },
 {
  "contractName": "EnumerableSet",
  "humanReadableAbiList": []
 },
 {
  "contractName": "IncentivesControllerV3",
  "humanReadableAbiList": [
   "function addPool(address,uint256) nonpayable",
   "function batchUpdateAllocPoint(address[],uint256[]) nonpayable",
   "function claim(address,address[]) nonpayable",
   "function claimReceiver(address) view returns (address)",
   "function claimableReward(address,address[]) view returns (uint256[])",
   "function emissionSchedule(uint256) view returns (uint128, uint128)",
   "function handleAction(address,uint256,uint256) nonpayable",
   "function incentivesController() view returns (address)",
   "function maxMintableTokens() view returns (uint256)",
   "function mintedTokens() view returns (uint256)",
   "function owner() view returns (address)",
   "function poolConfigurator() view returns (address)",
   "function poolInfo(address) view returns (uint256, uint256, uint256, uint256, address)",
   "function poolLength() view returns (uint256)",
   "function registeredTokens(uint256) view returns (address)",
   "function renounceOwnership() nonpayable",
   "function rewardMinter() view returns (address)",
   "function rewardsPerSecond() view returns (uint256)",
   "function setClaimReceiver(address,address) nonpayable",
   "function setOnwardIncentives(address,address) nonpayable",
   "function setRewardMinter(address) nonpayable",
   "function setup() nonpayable",
   "function startTime() view returns (uint256)",
   "function totalAllocPoint() view returns (uint256)",
   "function transferOwnership(address) nonpayable",
   "function userBaseClaimable(address) view returns (uint256)",
   "function userInfo(address,address) view returns (uint256, uint256)",
   "event AllocPointUpdated(address,uint256)",
   "event BalanceUpdated(address,address,uint256,uint256)",
   "event OwnershipTransferred(address,address)",
   "event PoolAdded(address,uint256)"
  ]
 },
 {
  "contractName": "MultiFeeDistributionUNIV3POS",
  "humanReadableAbiList": [
   "function accountAllNFTs(address) view returns (tuple[])",
   "function accountLiquidity(address) view returns (uint256, uint256, uint256)",
   "function accountLockedNFTs(address) view returns (tuple[])",
   "function accountUnlockableNFTs(address) view returns (tuple[])",
   "function addReward(address) nonpayable",
   "function claimableRewards(address) view returns (tuple[])",
   "function delegateExit(address) nonpayable",
   "function earnedBalances(address) view returns (uint256, tuple[])",
   "function exit(address) nonpayable",
   "function exitDelegatee(address) view returns (address)",
   "function getMinters() view returns (address[])",
   "function getPosConfig() view returns (tuple)",
   "function getReward(address[]) nonpayable",
   "function incentivesController() view returns (address)",
   "function kick(address[]) nonpayable",
   "function lastTimeRewardApplicable(address) view returns (uint256)",
   "function liquiditySupply() view returns (uint256)",
   "function lock(uint256[]) nonpayable",
   "function lockDuration() view returns (uint256)",
   "function mint(address,uint256) nonpayable",
   "function nft() view returns (address)",
   "function nfts(uint256) view returns (address, uint256, uint256)",
   "function onERC721Received(address,address,uint256,bytes) nonpayable returns (bytes4)",
   "function owner() view returns (address)",
   "function publicExit() nonpayable",
   "function publicExitAreSet() view returns (bool)",
   "function renounceOwnership() nonpayable",
   "function rewardData(address) view returns (uint256, uint256, uint256, uint256, uint256)",
   "function rewardLookback() view returns (uint256)",
   "function rewardToken() view returns (address)",
   "function rewardTokenVault() view returns (address)",
   "function rewardTokens(uint256) view returns (address)",
   "function rewards(address,address) view returns (uint256)",
   "function rewardsDuration() view returns (uint256)",
   "function setIncentivesController(address) nonpayable",
   "function setMinters(address[]) nonpayable",
   "function setTeamRewardFee(uint256) nonpayable",
   "function setTeamRewardVault(address) nonpayable",
   "function teamRewardFee() view returns (uint256)",
   "function teamRewardVault() view returns (address)",
   "function transferOwnership(address) nonpayable",
   "function userRewardPerTokenPaid(address,address) view returns (uint256)",
   "function vestingDuration() view returns (uint256)",
   "function withdraw() nonpayable",
   "function withdrawExpiredLocks(uint256[]) nonpayable",
   "function withdrawExpiredLocks() nonpayable",
   "function withdrawableBalance(address) view returns (uint256, uint256, uint256)",
   "event DelegateExitUpdated(address,address)",
   "event Exit(address,uint256,uint256)",
   "event IncentivesControllerUpdated(address)",
   "event Kicked(address,uint256)",
   "event Locked(address,uint256)",
   "event Mint(address,uint256)",
   "event MintersUpdated(address[])",
   "event OwnershipTransferred(address,address)",
   "event PositionConfigUpdated(address,address,uint24,int24,int24)",
   "event PublicExit()",
   "event RewardAdded(address)",
   "event RewardPaid(address,address,uint256)",
   "event TeamRewardFeeUpdated(uint256)",
   "event TeamRewardVaultUpdated(address)",
   "event Withdrawn(address,uint256)",
   "event WithdrawnExpiredLocks(address,uint256)"
  ]
 },
 {
  "contractName": "MultiFeeDistributionV3",
  "humanReadableAbiList": [
   "function accountAllNFTs(address) view returns (tuple[])",
   "function accountLiquidity(address) view returns (uint256, uint256, uint256)",
   "function accountLockedNFTs(address) view returns (tuple[])",
   "function accountUnlockableNFTs(address) view returns (tuple[])",
   "function addReward(address) nonpayable",
   "function claimableRewards(address) view returns (tuple[])",
   "function delegateExit(address) nonpayable",
   "function earnedBalances(address) view returns (uint256, tuple[])",
   "function exit(address) nonpayable",
   "function exitDelegatee(address) view returns (address)",
   "function getLiquidity(address,uint256) view returns (uint128)",
   "function getMinters() view returns (address[])",
   "function getReward(address[]) nonpayable",
   "function incentivesController() view returns (address)",
   "function lastTimeRewardApplicable(address) view returns (uint256)",
   "function liquiditySupply() view returns (uint256)",
   "function lock(uint256[]) nonpayable",
   "function lockDuration() view returns (uint256)",
   "function mint(address,uint256) nonpayable",
   "function nft() view returns (address)",
   "function nfts(uint256) view returns (address, uint256, uint256)",
   "function onERC721Received(address,address,uint256,bytes) nonpayable returns (bytes4)",
   "function owner() view returns (address)",
   "function poolId() view returns (uint80)",
   "function publicExit() nonpayable",
   "function publicExitAreSet() view returns (bool)",
   "function renounceOwnership() nonpayable",
   "function rewardData(address) view returns (uint256, uint256, uint256, uint256, uint256)",
   "function rewardLookback() view returns (uint256)",
   "function rewardToken() view returns (address)",
   "function rewardTokenVault() view returns (address)",
   "function rewardTokens(uint256) view returns (address)",
   "function rewards(address,address) view returns (uint256)",
   "function rewardsDuration() view returns (uint256)",
   "function setIncentivesController(address) nonpayable",
   "function setMinters(address[]) nonpayable",
   "function setTeamRewardFee(uint256) nonpayable",
   "function setTeamRewardVault(address) nonpayable",
   "function setTickRange(int24[2]) nonpayable",
   "function teamRewardFee() view returns (uint256)",
   "function teamRewardVault() view returns (address)",
   "function tickRange(uint256) view returns (int24)",
   "function transferOwnership(address) nonpayable",
   "function userRewardPerTokenPaid(address,address) view returns (uint256)",
   "function vestingDuration() view returns (uint256)",
   "function withdraw() nonpayable",
   "function withdrawExpiredLocks() nonpayable",
   "function withdrawableBalance(address) view returns (uint256, uint256, uint256)",
   "event Exit(address,uint256,uint256)",
   "event Locked(address,uint256)",
   "event Mint(address,uint256)",
   "event OwnershipTransferred(address,address)",
   "event PublicExit()",
   "event RewardPaid(address,address,uint256)",
   "event Withdrawn(address,uint256)",
   "event WithdrawnExpiredLocks(address,uint256)"
  ]
 },
 {
  "contractName": "IBasePositionManager",
  "humanReadableAbiList": [
   "function addressToPoolId(address) view returns (uint80)",
   "function positions(uint256) view returns (tuple, tuple)"
  ]
 },
 {
  "contractName": "IChefIncentivesController",
  "humanReadableAbiList": [
   "function addPool(address,uint256) nonpayable",
   "function claim(address,address[]) nonpayable",
   "function emissionSchedule(uint256) nonpayable returns (tuple)",
   "function handleAction(address,uint256,uint256) nonpayable",
   "function maxMintableTokens() nonpayable returns (uint256)",
   "function mintedTokens() view returns (uint256)",
   "function poolInfo(address) view returns (tuple)",
   "function poolLength() view returns (uint256)",
   "function registeredTokens(uint256) view returns (address)",
   "function rewardsPerSecond() view returns (uint256)",
   "function setClaimReceiver(address,address) nonpayable",
   "function startTime() view returns (uint256)",
   "function userBaseClaimable(address) view returns (uint256)",
   "function userInfo(address,address) view returns (tuple)"
  ]
 },
 {
  "contractName": "IMultiFeeDistribution",
  "humanReadableAbiList": [
   "function mint(address,uint256) nonpayable"
  ]
 },
 {
  "contractName": "IOnwardIncentivesController",
  "humanReadableAbiList": [
   "function handleAction(address,address,uint256,uint256) nonpayable"
  ]
 },
 {
  "contractName": "IUniswapV3PositionManager",
  "humanReadableAbiList": [
   "function positions(uint256) view returns (uint96, address, address, address, uint24, int24, int24, uint128, uint256, uint256, uint128, uint128)"
  ]
 },
 {
  "contractName": "MultiFeeDistributionMock",
  "humanReadableAbiList": [
   "function mint(address,uint256) nonpayable",
   "function rewardToken() view returns (address)"
  ]
 },
 {
  "contractName": "UniswapNFTMock",
  "humanReadableAbiList": [
   "function approve(address,uint256) nonpayable",
   "function balanceOf(address) view returns (uint256)",
   "function getApproved(uint256) view returns (address)",
   "function isApprovedForAll(address,address) view returns (bool)",
   "function mint((address,address,address,uint24,int24,int24,uint128)) nonpayable returns (uint256)",
   "function name() view returns (string)",
   "function ownerOf(uint256) view returns (address)",
   "function positions(uint256) view returns (uint96, address, address, address, uint24, int24, int24, uint128, uint256, uint256, uint128, uint128)",
   "function safeTransferFrom(address,address,uint256) nonpayable",
   "function safeTransferFrom(address,address,uint256,bytes) nonpayable",
   "function setApprovalForAll(address,bool) nonpayable",
   "function supportsInterface(bytes4) view returns (bool)",
   "function symbol() view returns (string)",
   "function tokenByIndex(uint256) view returns (uint256)",
   "function tokenOfOwnerByIndex(address,uint256) view returns (uint256)",
   "function tokenURI(uint256) view returns (string)",
   "function totalSupply() view returns (uint256)",
   "function transferFrom(address,address,uint256) nonpayable",
   "event Approval(address,address,uint256)",
   "event ApprovalForAll(address,address,bool)",
   "event Transfer(address,address,uint256)"
  ]
 }
]